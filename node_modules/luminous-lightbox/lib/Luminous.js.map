{"version":3,"sources":["../src/js/Luminous.js"],"names":["Luminous","trigger","options","VERSION","destroy","bind","open","close","_handleKeyup","isOpen","TypeError","rootNode","document","getRootNode","namespace","sourceAttribute","caption","openTrigger","closeTrigger","closeWithEscape","closeOnScroll","closeButtonEnabled","appendToNode","body","appendToSelector","onOpen","onClose","includeImgixJSClass","injectBaseStyles","_gallery","_arrowNavigation","settings","injectionRoot","_buildLightbox","_bindEventListeners","e","preventDefault","lightbox","window","addEventListener","removeEventListener","parentEl","querySelector","triggerEl","el","keyCode","_unbindEvents","prototype"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;AAEA;;;IAGqBA,Q;;;AACnB;;;;;AAKA,oBAAYC,OAAZ,EAAmC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AACjC,SAAKC,OAAL,GAAe,OAAf;AACA,SAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKC,IAAL,GAAY,KAAKA,IAAL,CAAUD,IAAV,CAAe,IAAf,CAAZ;AACA,SAAKE,KAAL,GAAa,KAAKA,KAAL,CAAWF,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKG,YAAL,GAAoB,KAAKA,YAAL,CAAkBH,IAAlB,CAAuB,IAAvB,CAApB;AAEA,SAAKI,MAAL,GAAc,KAAd;AAEA,SAAKR,OAAL,GAAeA,OAAf;;AAEA,QAAI,CAAC,uBAAa,KAAKA,OAAlB,CAAL,EAAiC;AAC/B,YAAM,IAAIS,SAAJ,CACJ,8DADI,CAAN;AAGD;;AAED,QAAIC,QAAQ,GAAGC,QAAf;;AACA,QAAI,iBAAiB,KAAKX,OAA1B,EAAmC;AACjCU,MAAAA,QAAQ,GAAG,KAAKV,OAAL,CAAaY,WAAb,EAAX;AACD,KApBgC,CAqBjC;AACA;AACA;;;AACA,QAAMC,SAAS,GAAGZ,OAAO,CAAC,WAAD,CAAP,IAAwB,IAA1C,CAxBiC,CAyBjC;;AACA,QAAMa,eAAe,GAAGb,OAAO,CAAC,iBAAD,CAAP,IAA8B,MAAtD,CA1BiC,CA2BjC;;AACA,QAAMc,OAAO,GAAGd,OAAO,CAAC,SAAD,CAAP,IAAsB,IAAtC,CA5BiC,CA6BjC;;AACA,QAAMe,WAAW,GAAGf,OAAO,CAAC,aAAD,CAAP,IAA0B,OAA9C,CA9BiC,CA+BjC;;AACA,QAAMgB,YAAY,GAAGhB,OAAO,CAAC,cAAD,CAAP,IAA2B,OAAhD,CAhCiC,CAiCjC;;AACA,QAAMiB,eAAe,GAAGjB,OAAO,CAAC,iBAAD,CAAP,IAA8B,IAAtD,CAlCiC,CAmCjC;;AACA,QAAMkB,aAAa,GAAGlB,OAAO,CAAC,eAAD,CAAP,IAA4B,KAAlD;AACA,QAAMmB,kBAAkB,GACtBnB,OAAO,CAAC,iBAAD,CAAP,IAA8B,IAA9B,GAAqCA,OAAO,CAAC,iBAAD,CAA5C,GAAkE,IADpE;AAEA,QAAMoB,YAAY,GAChBpB,OAAO,CAAC,cAAD,CAAP,KACCS,QAAQ,KAAKC,QAAb,GAAwBA,QAAQ,CAACW,IAAjC,GAAwCZ,QADzC,CADF,CAvCiC,CA0CjC;;AACA,QAAMa,gBAAgB,GAAGtB,OAAO,CAAC,kBAAD,CAAP,IAA+B,IAAxD,CA3CiC,CA4CjC;AACA;;AACA,QAAMuB,MAAM,GAAGvB,OAAO,CAAC,QAAD,CAAP,IAAqB,IAApC,CA9CiC,CA+CjC;AACA;;AACA,QAAMwB,OAAO,GAAGxB,OAAO,CAAC,SAAD,CAAP,IAAsB,IAAtC,CAjDiC,CAkDjC;AACA;AACA;;AACA,QAAMyB,mBAAmB,GAAGzB,OAAO,CAAC,qBAAD,CAAP,IAAkC,KAA9D,CArDiC,CAsDjC;AACA;;AACA,QAAM0B,gBAAgB,GAAG1B,OAAO,CAAC,kBAAD,CAAP,IAA+B,IAAxD,CAxDiC,CAyDjC;;AACA,QAAM2B,QAAQ,GAAG3B,OAAO,CAAC,UAAD,CAAP,IAAuB,IAAxC;;AACA,QAAM4B,gBAAgB,GAAG5B,OAAO,CAAC,kBAAD,CAAP,IAA+B,IAAxD;;AAEA,SAAK6B,QAAL,GAAgB;AACdjB,MAAAA,SAAS,EAATA,SADc;AAEdC,MAAAA,eAAe,EAAfA,eAFc;AAGdC,MAAAA,OAAO,EAAPA,OAHc;AAIdC,MAAAA,WAAW,EAAXA,WAJc;AAKdC,MAAAA,YAAY,EAAZA,YALc;AAMdC,MAAAA,eAAe,EAAfA,eANc;AAOdC,MAAAA,aAAa,EAAbA,aAPc;AAQdC,MAAAA,kBAAkB,EAAlBA,kBARc;AASdC,MAAAA,YAAY,EAAZA,YATc;AAUdE,MAAAA,gBAAgB,EAAhBA,gBAVc;AAWdC,MAAAA,MAAM,EAANA,MAXc;AAYdC,MAAAA,OAAO,EAAPA,OAZc;AAadC,MAAAA,mBAAmB,EAAnBA,mBAbc;AAcdC,MAAAA,gBAAgB,EAAhBA,gBAdc;AAedC,MAAAA,QAAQ,EAARA,QAfc;AAgBdC,MAAAA,gBAAgB,EAAhBA;AAhBc,KAAhB;AAmBA,QAAIE,aAAa,GAAGpB,QAAQ,CAACW,IAA7B;;AACA,QAAID,YAAY,IAAI,iBAAiBA,YAArC,EAAmD;AACjDU,MAAAA,aAAa,GAAGV,YAAY,CAACT,WAAb,EAAhB;AACD;;AAED,QAAI,KAAKkB,QAAL,CAAcH,gBAAlB,EAAoC;AAClC,yCAAqBI,aAArB;AACD;;AAED,SAAKC,cAAL;;AACA,SAAKC,mBAAL;AACD;AAED;;;;;;;;;yBAKKC,C,EAAG;AACN,UAAIA,CAAC,IAAI,OAAOA,CAAC,CAACC,cAAT,KAA4B,UAArC,EAAiD;AAC/CD,QAAAA,CAAC,CAACC,cAAF;AACD;;AAED,WAAKC,QAAL,CAAc/B,IAAd;;AAEA,UAAI,KAAKyB,QAAL,CAAcX,aAAlB,EAAiC;AAC/BkB,QAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKhC,KAAvC,EAA8C,KAA9C;AACD;;AAED,UAAMkB,MAAM,GAAG,KAAKM,QAAL,CAAcN,MAA7B;;AACA,UAAIA,MAAM,IAAI,OAAOA,MAAP,KAAkB,UAAhC,EAA4C;AAC1CA,QAAAA,MAAM;AACP;;AAED,WAAKhB,MAAL,GAAc,IAAd;AACD;AAED;;;;;;;;0BAKM0B,C,EAAG;AACP,UAAI,KAAKJ,QAAL,CAAcX,aAAlB,EAAiC;AAC/BkB,QAAAA,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqC,KAAKjC,KAA1C,EAAiD,KAAjD;AACD;;AAED,WAAK8B,QAAL,CAAc9B,KAAd;AAEA,UAAMmB,OAAO,GAAG,KAAKK,QAAL,CAAcL,OAA9B;;AACA,UAAIA,OAAO,IAAI,OAAOA,OAAP,KAAmB,UAAlC,EAA8C;AAC5CA,QAAAA,OAAO;AACR;;AAED,WAAKjB,MAAL,GAAc,KAAd;AACD;AAED;;;;;;;;qCAKiB;AACf,UAAIgC,QAAQ,GAAG,KAAKV,QAAL,CAAcT,YAA7B;;AAEA,UAAI,KAAKS,QAAL,CAAcP,gBAAlB,EAAoC;AAClCiB,QAAAA,QAAQ,GAAG7B,QAAQ,CAAC8B,aAAT,CAAuB,KAAKX,QAAL,CAAcP,gBAArC,CAAX;AACD;;AAED,WAAKa,QAAL,GAAgB,sBAAa;AAC3BvB,QAAAA,SAAS,EAAE,KAAKiB,QAAL,CAAcjB,SADE;AAE3B2B,QAAAA,QAAQ,EAAEA,QAFiB;AAG3BE,QAAAA,SAAS,EAAE,KAAK1C,OAHW;AAI3Bc,QAAAA,eAAe,EAAE,KAAKgB,QAAL,CAAchB,eAJJ;AAK3BC,QAAAA,OAAO,EAAE,KAAKe,QAAL,CAAcf,OALI;AAM3BW,QAAAA,mBAAmB,EAAE,KAAKI,QAAL,CAAcJ,mBANR;AAO3BN,QAAAA,kBAAkB,EAAE,KAAKU,QAAL,CAAcV,kBAPP;AAQ3BQ,QAAAA,QAAQ,EAAE,KAAKE,QAAL,CAAcF,QARG;AAS3BC,QAAAA,gBAAgB,EAAE,KAAKC,QAAL,CAAcD,gBATL;AAU3BZ,QAAAA,YAAY,EAAE,KAAKa,QAAL,CAAcb,YAVD;AAW3BQ,QAAAA,OAAO,EAAE,KAAKnB;AAXa,OAAb,CAAhB;AAaD;AAED;;;;;;;;0CAKsB;AACpB,WAAKN,OAAL,CAAasC,gBAAb,CAA8B,KAAKR,QAAL,CAAcd,WAA5C,EAAyD,KAAKX,IAA9D,EAAoE,KAApE;;AAEA,UAAI,KAAKyB,QAAL,CAAcZ,eAAlB,EAAmC;AACjCmB,QAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiC,KAAK/B,YAAtC,EAAoD,KAApD;AACD;AACF;AAED;;;;;;;;oCAKgB;AACd,WAAKP,OAAL,CAAauC,mBAAb,CACE,KAAKT,QAAL,CAAcd,WADhB,EAEE,KAAKX,IAFP,EAGE,KAHF;;AAKA,UAAI,KAAK+B,QAAL,CAAcO,EAAlB,EAAsB;AACpB,aAAKP,QAAL,CAAcO,EAAd,CAAiBJ,mBAAjB,CACE,KAAKT,QAAL,CAAcb,YADhB,EAEE,KAAKX,KAFP,EAGE,KAHF;AAKD;;AAED,UAAI,KAAKwB,QAAL,CAAcZ,eAAlB,EAAmC;AACjCmB,QAAAA,MAAM,CAACE,mBAAP,CAA2B,OAA3B,EAAoC,KAAKhC,YAAzC,EAAuD,KAAvD;AACD;AACF;AAED;;;;;;;;;iCAMa2B,C,EAAG;AACd,UAAI,KAAK1B,MAAL,IAAe0B,CAAC,CAACU,OAAF,KAAc,EAAjC,EAAqC;AACnC,aAAKtC,KAAL;AACD;AACF;AAED;;;;;;;8BAIU;AACR,WAAKuC,aAAL;;AACA,WAAKT,QAAL,CAAcjC,OAAd;AACD;;;;;AAGH;;;;AACAJ,QAAQ,CAAC+C,SAAT,CAAmB,MAAnB,IAA6B/C,QAAQ,CAAC+C,SAAT,CAAmBzC,IAAhD;AACAN,QAAQ,CAAC+C,SAAT,CAAmB,OAAnB,IAA8B/C,QAAQ,CAAC+C,SAAT,CAAmBxC,KAAjD;AACAP,QAAQ,CAAC+C,SAAT,CAAmB,SAAnB,IAAgC/C,QAAQ,CAAC+C,SAAT,CAAmB3C,OAAnD;AACA","sourcesContent":["import { isDOMElement } from \"./util/dom\";\nimport injectBaseStylesheet from \"./injectBaseStylesheet\";\nimport Lightbox from \"./Lightbox\";\n\n/**\n * Represents the default luminous lightbox\n */\nexport default class Luminous {\n  /**\n   * Constructor\n   * @param {!Element} trigger Trigger element to open lightbox\n   * @param {Object=} options Luminous options\n   */\n  constructor(trigger, options = {}) {\n    this.VERSION = \"2.3.2\";\n    this.destroy = this.destroy.bind(this);\n    this.open = this.open.bind(this);\n    this.close = this.close.bind(this);\n    this._handleKeyup = this._handleKeyup.bind(this);\n\n    this.isOpen = false;\n\n    this.trigger = trigger;\n\n    if (!isDOMElement(this.trigger)) {\n      throw new TypeError(\n        \"`new Luminous` requires a DOM element as its first argument.\"\n      );\n    }\n\n    let rootNode = document;\n    if (\"getRootNode\" in this.trigger) {\n      rootNode = this.trigger.getRootNode();\n    }\n    // Prefix for generated element class names (e.g. `my-ns` will\n    // result in classes such as `my-ns-lightbox`. Default `lum-`\n    // prefixed classes will always be added as well.\n    const namespace = options[\"namespace\"] || null;\n    // Which attribute to pull the lightbox image source from.\n    const sourceAttribute = options[\"sourceAttribute\"] || \"href\";\n    // Captions can be a literal string, or a function that receives the Luminous instance's trigger element as an argument and returns a string. Supports HTML, so use caution when dealing with user input.\n    const caption = options[\"caption\"] || null;\n    // The event to listen to on the _trigger_ element: triggers opening.\n    const openTrigger = options[\"openTrigger\"] || \"click\";\n    // The event to listen to on the _lightbox_ element: triggers closing.\n    const closeTrigger = options[\"closeTrigger\"] || \"click\";\n    // Allow closing by pressing escape.\n    const closeWithEscape = options[\"closeWithEscape\"] || true;\n    // Automatically close when the page is scrolled.\n    const closeOnScroll = options[\"closeOnScroll\"] || false;\n    const closeButtonEnabled =\n      options[\"showCloseButton\"] != null ? options[\"showCloseButton\"] : true;\n    const appendToNode =\n      options[\"appendToNode\"] ||\n      (rootNode === document ? document.body : rootNode);\n    // A selector defining what to append the lightbox element to.\n    const appendToSelector = options[\"appendToSelector\"] || null;\n    // If present (and a function), this will be called\n    // whenever the lightbox is opened.\n    const onOpen = options[\"onOpen\"] || null;\n    // If present (and a function), this will be called\n    // whenever the lightbox is closed.\n    const onClose = options[\"onClose\"] || null;\n    // When true, adds the `imgix-fluid` class to the `img`\n    // inside the lightbox. See https://github.com/imgix/imgix.js\n    // for more information.\n    const includeImgixJSClass = options[\"includeImgixJSClass\"] || false;\n    // Add base styles to the page. See the \"Theming\"\n    // section of README.md for more information.\n    const injectBaseStyles = options[\"injectBaseStyles\"] || true;\n    // Internal use only!\n    const _gallery = options[\"_gallery\"] || null;\n    const _arrowNavigation = options[\"_arrowNavigation\"] || null;\n\n    this.settings = {\n      namespace,\n      sourceAttribute,\n      caption,\n      openTrigger,\n      closeTrigger,\n      closeWithEscape,\n      closeOnScroll,\n      closeButtonEnabled,\n      appendToNode,\n      appendToSelector,\n      onOpen,\n      onClose,\n      includeImgixJSClass,\n      injectBaseStyles,\n      _gallery,\n      _arrowNavigation\n    };\n\n    let injectionRoot = document.body;\n    if (appendToNode && \"getRootNode\" in appendToNode) {\n      injectionRoot = appendToNode.getRootNode();\n    }\n\n    if (this.settings.injectBaseStyles) {\n      injectBaseStylesheet(injectionRoot);\n    }\n\n    this._buildLightbox();\n    this._bindEventListeners();\n  }\n\n  /**\n   * Opens the lightbox\n   * @param {Event=} e Event which triggered opening\n   * @return {void}\n   */\n  open(e) {\n    if (e && typeof e.preventDefault === \"function\") {\n      e.preventDefault();\n    }\n\n    this.lightbox.open();\n\n    if (this.settings.closeOnScroll) {\n      window.addEventListener(\"scroll\", this.close, false);\n    }\n\n    const onOpen = this.settings.onOpen;\n    if (onOpen && typeof onOpen === \"function\") {\n      onOpen();\n    }\n\n    this.isOpen = true;\n  }\n\n  /**\n   * Closes the lightbox\n   * @param {Event=} e Event which triggered closing\n   * @return {void}\n   */\n  close(e) {\n    if (this.settings.closeOnScroll) {\n      window.removeEventListener(\"scroll\", this.close, false);\n    }\n\n    this.lightbox.close();\n\n    const onClose = this.settings.onClose;\n    if (onClose && typeof onClose === \"function\") {\n      onClose();\n    }\n\n    this.isOpen = false;\n  }\n\n  /**\n   * Builds the internal lightbox instance\n   * @protected\n   * @return {void}\n   */\n  _buildLightbox() {\n    let parentEl = this.settings.appendToNode;\n\n    if (this.settings.appendToSelector) {\n      parentEl = document.querySelector(this.settings.appendToSelector);\n    }\n\n    this.lightbox = new Lightbox({\n      namespace: this.settings.namespace,\n      parentEl: parentEl,\n      triggerEl: this.trigger,\n      sourceAttribute: this.settings.sourceAttribute,\n      caption: this.settings.caption,\n      includeImgixJSClass: this.settings.includeImgixJSClass,\n      closeButtonEnabled: this.settings.closeButtonEnabled,\n      _gallery: this.settings._gallery,\n      _arrowNavigation: this.settings._arrowNavigation,\n      closeTrigger: this.settings.closeTrigger,\n      onClose: this.close\n    });\n  }\n\n  /**\n   * Binds lightbox events to the trigger element\n   * @protected\n   * @return {void}\n   */\n  _bindEventListeners() {\n    this.trigger.addEventListener(this.settings.openTrigger, this.open, false);\n\n    if (this.settings.closeWithEscape) {\n      window.addEventListener(\"keyup\", this._handleKeyup, false);\n    }\n  }\n\n  /**\n   * Unbinds all events\n   * @protected\n   * @return {void}\n   */\n  _unbindEvents() {\n    this.trigger.removeEventListener(\n      this.settings.openTrigger,\n      this.open,\n      false\n    );\n    if (this.lightbox.el) {\n      this.lightbox.el.removeEventListener(\n        this.settings.closeTrigger,\n        this.close,\n        false\n      );\n    }\n\n    if (this.settings.closeWithEscape) {\n      window.removeEventListener(\"keyup\", this._handleKeyup, false);\n    }\n  }\n\n  /**\n   * Handles key up events and closes lightbox when esc is pressed\n   * @param {!Event} e Keyboard event\n   * @return {void}\n   * @protected\n   */\n  _handleKeyup(e) {\n    if (this.isOpen && e.keyCode === 27) {\n      this.close();\n    }\n  }\n\n  /**\n   * Destroys internal lightbox and unbinds events\n   * @return {void}\n   */\n  destroy() {\n    this._unbindEvents();\n    this.lightbox.destroy();\n  }\n}\n\n/* eslint-disable no-self-assign */\nLuminous.prototype[\"open\"] = Luminous.prototype.open;\nLuminous.prototype[\"close\"] = Luminous.prototype.close;\nLuminous.prototype[\"destroy\"] = Luminous.prototype.destroy;\n/* eslint-enable no-self-assign */\n"],"file":"Luminous.js"}